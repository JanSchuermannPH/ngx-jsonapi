{"version":3,"file":"core.js","sourceRoot":"","sources":["../src/core.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Optional, Inject } from '@angular/core';\nimport { noop } from 'rxjs/util/noop';\n\nimport { ICollection } from './interfaces';\nimport { Service } from './service';\nimport { Resource } from './resource';\nimport { Base } from './services/base';\nimport { JsonapiConfig } from './jsonapi-config';\nimport { Http as JsonapiHttpImported } from './sources/http.service';\nimport { StoreService as JsonapiStore } from './sources/store.service';\nimport { IRelationship } from './interfaces/';\nimport { forEach } from './foreach';\n\n@Injectable()\nexport class Core {\n    public static me: Core;\n    public static injectedServices: {\n        JsonapiStoreService: any;\n        JsonapiHttp: JsonapiHttpImported;\n        rsJsonapiConfig: JsonapiConfig;\n    };\n\n    private resourceServices: { [type:string]: Service } = {};\n    public loadingsCounter: number = 0;\n    public loadingsStart: Function = noop;\n    public loadingsDone: Function = noop;\n    public loadingsError: Function = noop;\n    public loadingsOffline: Function = noop;\n\n    public config: JsonapiConfig;\n\n    public constructor(\n        @Optional() user_config: JsonapiConfig,\n        jsonapiStoreService: JsonapiStore,\n        jsonapiHttp: JsonapiHttpImported\n    ) {\n        this.config = new JsonapiConfig();\n        for (let k in this.config)\n            (<any>this.config)[k] = ((<any>this.config)[k] !== undefined ? (<any>this.config)[k] : (<any>this.config)[k]);\n\n        Core.me = this;\n        Core.injectedServices = {\n            JsonapiStoreService: jsonapiStoreService,\n            JsonapiHttp: jsonapiHttp,\n            rsJsonapiConfig: this.config\n        };\n    }\n\n    public registerService<R extends Resource>(clase: Service): Service<R> | false {\n        if (clase.type in this.resourceServices) {\n            return false;\n        }\n        this.resourceServices[clase.type] = clase;\n\n        return <Service<R>>clase;\n    }\n\n    public getResourceService(type: string): Service {\n        return this.resourceServices[type];\n    }\n\n    public refreshLoadings(factor: number): void {\n        this.loadingsCounter += factor;\n        if (this.loadingsCounter === 0) {\n            this.loadingsDone();\n        } else if (this.loadingsCounter === 1) {\n            this.loadingsStart();\n        }\n    }\n\n    public clearCache(): boolean {\n        Core.injectedServices.JsonapiStoreService.clearCache();\n\n        return true;\n    }\n\n    // just an helper\n    public duplicateResource<R extends Resource>(resource: R, ...relations_alias_to_duplicate_too: Array<string>): R {\n        let newresource = <R>this.getResourceService(resource.type).new();\n        newresource.attributes = { ...newresource.attributes, ...resource.attributes };\n\n        forEach(resource.relationships, (alias: string, relationship: IRelationship) => {\n            if ('id' in relationship.data) {\n                // relation hasOne\n                if (relations_alias_to_duplicate_too.indexOf(alias) > -1) {\n                    newresource.addRelationship(this.duplicateResource(<Resource>relationship.data), alias);\n                } else {\n                    newresource.addRelationship(<Resource>relationship.data, alias);\n                }\n            } else {\n                // relation hasMany\n                if (relations_alias_to_duplicate_too.indexOf(alias) > -1) {\n                    Base.forEach(relationship.data, relationresource => {\n                        newresource.addRelationship(this.duplicateResource(relationresource), alias);\n                    });\n                } else {\n                    newresource.addRelationships(<ICollection>relationship.data, alias);\n                }\n            }\n        });\n\n        return newresource;\n    }\n}\n"]}