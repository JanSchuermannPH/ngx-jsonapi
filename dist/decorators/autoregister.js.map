{"version":3,"file":"autoregister.js","sourceRoot":"","sources":["../../src/decorators/autoregister.ts"],"names":[],"mappings":";;;;;;;AAEA,MAAM;IACF,MAAM,CAAC,UAAmC,MAAS;;QAE/C,qBAAI,QAAQ,GAAG,MAAM,CAAC;;QAGtB,qBAAI,CAAC,GAAQ,UAAU,GAAG,IAAI;YAC1B,qBAAI,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;YACzC,QAAQ,CAAC,QAAQ,EAAE,CAAC;YACpB,MAAM,CAAC,QAAQ,CAAC;SACnB,CAAA;;QAGD,CAAC,CAAC,SAAS,GAAG,QAAQ,CAAC,SAAS,CAAC;;QAGjC,MAAM,CAAC,CAAC,CAAC;KACZ,CAAC;CACL","sourcesContent":["import { Service } from '../service';\n\nexport function Autoregister() {\n    return function<T extends typeof Service>(target: T): T {\n        // save a reference to the original constructor\n        var original = target;\n\n        // the new constructor behaviour\n        var f: any = function (...args) {\n            let instance = original.apply(this, args)\n            instance.register();\n            return instance;\n        }\n\n        // copy prototype so intanceof operator still works\n        f.prototype = original.prototype;\n\n        // return new constructor (will override original)\n        return f;\n    };\n}\n"]}