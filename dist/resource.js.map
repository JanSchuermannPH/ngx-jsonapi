{"version":3,"file":"resource.js","sourceRoot":"","sources":["../src/resource.ts"],"names":[],"mappings":"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","sourcesContent":["import { Core } from './core';\nimport { Service } from './service';\nimport { Base } from './services/base';\nimport { ParentResourceService } from './parent-resource-service';\nimport { PathBuilder } from './services/path-builder';\n// import { UrlParamsBuilder } from './services/url-params-builder';\nimport { Converter } from './services/converter';\nimport { IDataObject } from './interfaces/data-object';\n\nimport { isFunction } from 'rxjs/util/isFunction';\nimport { isArray } from 'rxjs/util/isArray';\n\nimport {\n    IAttributes,\n    ICollection,\n    IExecParams,\n    IParamsResource,\n    IRelationships,\n    IRelationship,\n} from './interfaces';\n\nexport class Resource extends ParentResourceService {\n    public is_new = true;\n    public is_loading = false;\n    public is_saving = false;\n    public id: string = '';\n    public type: string = '';\n    public attributes: IAttributes = {};\n    public relationships: IRelationships = {};\n    public lastupdate: number;\n\n    public reset(): void {\n        this.id = '';\n        this.attributes = {};\n        this.relationships = {};\n        Base.forEach(this.getService().schema.relationships, (value, key) => {\n            if (this.getService().schema.relationships[key].hasMany) {\n                let relation: IRelationship = {\n                    data: Base.newCollection(),\n                    content: 'collection',\n                };\n                this.relationships[key] = relation;\n            } else {\n                let relation: IRelationship = { data: {}, content: 'none' };\n                this.relationships[key] = relation;\n            }\n        });\n        this.is_new = true;\n    }\n\n    public toObject(params?: IParamsResource): IDataObject {\n        params = { ...{}, ...Base.Params, ...params };\n\n        let relationships = {};\n        let included = [];\n        let included_ids = []; // just for control don't repeat any resource\n\n        // REALTIONSHIPS\n        Base.forEach(\n            this.relationships,\n            (relationship: IRelationship, relation_alias: string) => {\n                if (\n                    this.getService().schema.relationships[relation_alias] &&\n                    this.getService().schema.relationships[relation_alias]\n                        .hasMany\n                ) {\n                    // has many (hasMany:true)\n                    relationships[relation_alias] = { data: [] };\n\n                    Base.forEach(relationship.data, (resource: Resource) => {\n                        let reational_object = {\n                            id: resource.id,\n                            type: resource.type,\n                        };\n                        relationships[relation_alias].data.push(\n                            reational_object\n                        );\n\n                        // no se agregó aún a included && se ha pedido incluir con el parms.include\n                        let temporal_id = resource.type + '_' + resource.id;\n                        if (\n                            included_ids.indexOf(temporal_id) === -1 &&\n                            params.include.indexOf(relation_alias) !== -1\n                        ) {\n                            included_ids.push(temporal_id);\n                            included.push(resource.toObject({}).data);\n                        }\n                    });\n                } else {\n                    // has one (hasMany:false)\n\n                    let relationship_data = <Resource>relationship.data;\n                    if (\n                        !('id' in relationship.data) &&\n                        Object.keys(relationship.data).length > 0\n                    ) {\n                        console.warn(\n                            relation_alias +\n                                ' defined with hasMany:false, but I have a collection'\n                        );\n                    }\n\n                    if (relationship_data.id && relationship_data.type) {\n                        relationships[relation_alias] = {\n                            data: {\n                                id: relationship_data.id,\n                                type: relationship_data.type,\n                            },\n                        };\n                    } else {\n                        relationships[relation_alias] = { data: {} };\n                    }\n\n                    // no se agregó aún a included && se ha pedido incluir con el parms.include\n                    let temporal_id =\n                        relationship_data.type + '_' + relationship_data.id;\n                    if (\n                        included_ids.indexOf(temporal_id) === -1 &&\n                        params.include.indexOf(relationship_data.type) !== -1\n                    ) {\n                        included_ids.push(temporal_id);\n                        included.push(relationship_data.toObject({}).data);\n                    }\n                }\n            }\n        );\n\n        // just for performance dont copy if not necessary\n        let attributes;\n        if (this.getService() && this.getService().parseToServer) {\n            attributes = { ...{}, ...this.attributes };\n            this.getService().parseToServer(attributes);\n        } else {\n            attributes = this.attributes;\n        }\n\n        let ret: IDataObject = {\n            data: {\n                type: this.type,\n                id: this.id,\n                attributes: attributes,\n                relationships: relationships,\n            },\n        };\n\n        if (included.length > 0) {\n            ret.included = included;\n        }\n\n        return ret;\n    }\n\n    public async save<T extends Resource>(\n        params?: Object | Function,\n        fc_success?: Function,\n        fc_error?: Function\n    ): Promise<object> {\n        return this.__exec({\n            id: null,\n            params: params,\n            fc_success: fc_success,\n            fc_error: fc_error,\n            exec_type: 'save',\n        });\n    }\n\n    protected async __exec<T extends Resource>(\n        exec_params: IExecParams\n    ): Promise<object> {\n        let exec_pp = this.proccess_exec_params(exec_params);\n\n        switch (exec_params.exec_type) {\n            case 'save':\n                return this._save(\n                    exec_pp.params,\n                    exec_params.fc_success,\n                    exec_params.fc_error\n                );\n        }\n    }\n\n    private async _save<T extends Resource>(\n        params: IParamsResource,\n        fc_success: Function,\n        fc_error: Function\n    ): Promise<object> {\n        let promisesave: Promise<object> = new Promise(\n            (resolve, reject): void => {\n                if (this.is_saving || this.is_loading) {\n                    return;\n                }\n                this.is_saving = true;\n\n                let object = this.toObject(params);\n\n                // http request\n                let path = new PathBuilder();\n                path.applyParams(this.getService(), params);\n                if (this.id) {\n                    path.appendPath(this.id);\n                }\n\n                let promise = Core.injectedServices.JsonapiHttp.exec(\n                    path.get(),\n                    this.id ? 'PATCH' : 'POST',\n                    object,\n                    !isFunction(fc_error)\n                );\n\n                promise\n                    .then(success => {\n                        this.is_saving = false;\n\n                        // foce reload cache (for example, we add a new element)\n                        if (!this.id) {\n                            this.getService().cachememory.deprecateCollections(\n                                path.get()\n                            );\n                            this.getService().cachestore.deprecateCollections(\n                                path.get()\n                            );\n                        }\n\n                        // is a resource?\n                        if ('id' in success.data) {\n                            this.id = success.data.id;\n                            Converter.build(success, this);\n                            /*\n                            Si lo guardo en la caché, luego no queda bindeado con la vista\n                            Usar {{ $ctrl.service.getCachedResources() | json }}, agregar uno nuevo, editar\n                            */\n                            // this.getService().cachememory.setResource(this);\n                        } else if (isArray(success.data)) {\n                            console.warn(\n                                'Server return a collection when we save()',\n                                success.data\n                            );\n\n                            /*\n                        we request the service again, because server maybe are giving\n                        us another type of resource (getService(resource.type))\n                        */\n                            let tempororay_collection = this.getService().cachememory.getOrCreateCollection(\n                                'justAnUpdate'\n                            );\n                            Converter.build(\n                                success,\n                                tempororay_collection\n                            );\n                            Base.forEach(\n                                tempororay_collection,\n                                (resource_value: Resource, key: string) => {\n                                    let res = Converter.getService(\n                                        resource_value.type\n                                    ).cachememory.resources[resource_value.id];\n                                    Converter.getService(\n                                        resource_value.type\n                                    ).cachememory.setResource(resource_value);\n                                    Converter.getService(\n                                        resource_value.type\n                                    ).cachestore.setResource(resource_value);\n                                    res.id = res.id + 'x';\n                                }\n                            );\n\n                            console.warn(\n                                'Temporal collection for a resource_value update',\n                                tempororay_collection\n                            );\n                        }\n\n                        this.runFc(fc_success, success);\n                        resolve(success);\n                    })\n                    .catch(error => {\n                        this.is_saving = false;\n                        this.runFc(\n                            fc_error,\n                            'data' in error ? error.data : error\n                        );\n                        reject('data' in error ? error.data : error);\n                    });\n            }\n        );\n\n        return promisesave;\n    }\n\n    public addRelationship<T extends Resource>(\n        resource: T,\n        type_alias?: string\n    ) {\n        let object_key = resource.id;\n        if (!object_key) {\n            object_key = 'new_' + Math.floor(Math.random() * 100000);\n        }\n\n        type_alias = type_alias ? type_alias : resource.type;\n        if (!(type_alias in this.relationships)) {\n            this.relationships[type_alias] = { data: {}, content: 'none' };\n        }\n\n        if (\n            type_alias in this.getService().schema.relationships &&\n            this.getService().schema.relationships[type_alias].hasMany\n        ) {\n            this.relationships[type_alias].data[object_key] = resource;\n        } else {\n            this.relationships[type_alias].data = resource;\n        }\n    }\n\n    public addRelationships(resources: ICollection, type_alias: string) {\n        if (!(type_alias in this.relationships)) {\n            this.relationships[type_alias] = { data: {}, content: 'none' };\n        } else {\n            // we receive a new collection of this relationship. We need remove old (if don't exist on new collection)\n            Base.forEach(this.relationships[type_alias].data, resource => {\n                if (!(resource.id in resources)) {\n                    delete this.relationships[type_alias].data[resource.id];\n                }\n            });\n        }\n\n        Base.forEach(resources, resource => {\n            this.relationships[type_alias].data[resource.id] = resource;\n        });\n    }\n\n    public addRelationshipsArray<T extends Resource>(\n        resources: Array<T>,\n        type_alias?: string\n    ): void {\n        resources.forEach((item: Resource) => {\n            this.addRelationship(item, type_alias || item.type);\n        });\n    }\n\n    public removeRelationship(type_alias: string, id: string): boolean {\n        if (!(type_alias in this.relationships)) {\n            return false;\n        }\n        if (!('data' in this.relationships[type_alias])) {\n            return false;\n        }\n\n        if (\n            type_alias in this.getService().schema.relationships &&\n            this.getService().schema.relationships[type_alias].hasMany\n        ) {\n            if (!(id in this.relationships[type_alias].data)) {\n                return false;\n            }\n            delete this.relationships[type_alias].data[id];\n        } else {\n            this.relationships[type_alias].data = {};\n        }\n\n        return true;\n    }\n\n    /*\n    @return This resource like a service\n    */\n    public getService(): Service {\n        return Converter.getService(this.type);\n    }\n}\n"]}