{"version":3,"file":"service.js","sourceRoot":"","sources":["../src/service.ts"],"names":[],"mappings":"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","sourcesContent":["import { noop } from 'rxjs/util/noop';\nimport { Observable } from \"rxjs/Observable\";\nimport { Subject } from \"rxjs/Subject\";\nimport { BehaviorSubject } from \"rxjs/BehaviorSubject\";\nimport { of } from 'rxjs/observable/of';\n\nimport { Core } from './core';\nimport { Base } from './services/base';\nimport { Resource } from './resource';\nimport { ParentResourceService } from './parent-resource-service';\nimport { PathBuilder } from './services/path-builder';\nimport { UrlParamsBuilder } from './services/url-params-builder';\nimport { Converter } from './services/converter';\nimport { LocalFilter } from './services/localfilter';\nimport { CacheMemory } from './services/cachememory';\nimport { CacheStore } from './services/cachestore';\nimport {\n    ISchema,\n    ICollection,\n    IExecParams,\n    ICacheMemory,\n    IParamsCollection,\n    IParamsResource,\n    IAttributes,\n} from './interfaces';\n\nexport class Service<R extends Resource = Resource> extends ParentResourceService {\n    public schema: ISchema;\n    public cachememory: ICacheMemory<R>;\n    public cachestore: CacheStore;\n    public type: string;\n    public resource = Resource;\n\n    private path: string; // without slashes\n    private smartfiltertype = 'undefined';\n\n    constructor() {\n        super();\n        this.register();\n    }\n\n    /*\n    Register schema on Core\n    @return true if the resource don't exist and registered ok\n    */\n    public register(): Service<R> | false {\n        if (Core.me === null) {\n            throw new Error(\n                'Error: you are trying register `' +\n                    this.type +\n                    '` before inject JsonapiCore somewhere, almost one time.'\n            );\n        }\n        // only when service is registered, not cloned object\n        this.cachememory = new CacheMemory();\n        this.cachestore = new CacheStore();\n        this.schema = { ...{}, ...Base.Schema, ...this.schema };\n\n        return Core.me.registerService<R>(this);\n    }\n\n    public newResource(): R {\n        let resource = new this.resource();\n\n        return <R>resource;\n    }\n\n    public new(): R {\n        let resource = this.newResource();\n        resource.type = this.type;\n        // issue #36: just if service is not registered yet.\n        this.getService();\n        resource.reset();\n\n        return resource;\n    }\n\n    public getPrePath(): string {\n        return '';\n    }\n    public getPath(): string {\n        return this.path ? this.path : this.type;\n    }\n\n    public get(\n        id: string,\n        params?: IParamsResource | Function,\n        fc_success?: Function,\n        fc_error?: Function\n    ): Observable<R> {\n        return <Observable<R>>this.__exec({\n            id: id,\n            params: params,\n            fc_success: fc_success,\n            fc_error: fc_error,\n            exec_type: 'get',\n        });\n    }\n\n    public delete(\n        id: string,\n        params?: Object | Function,\n        fc_success?: Function,\n        fc_error?: Function\n    ): Observable<void> {\n        return <Observable<void>>this.__exec({\n            id: id,\n            params: params,\n            fc_success: fc_success,\n            fc_error: fc_error,\n            exec_type: 'delete',\n        });\n    }\n\n    public all(\n        params?: IParamsCollection | Function,\n        fc_success?: Function,\n        fc_error?: Function\n    ): Observable<ICollection<R>> {\n        return <Observable<ICollection<R>>>this.__exec({\n            id: null,\n            params: params,\n            fc_success: fc_success,\n            fc_error: fc_error,\n            exec_type: 'all',\n        });\n    }\n\n    protected __exec(exec_params: IExecParams): Observable<R | ICollection<R> | void> {\n        let exec_pp = super.proccess_exec_params(exec_params);\n\n        switch (exec_pp.exec_type) {\n            case 'get':\n                return this._get(\n                    exec_pp.id,\n                    exec_pp.params,\n                    exec_pp.fc_success,\n                    exec_pp.fc_error\n                );\n            case 'delete':\n                return this._delete(\n                    exec_pp.id,\n                    exec_pp.params,\n                    exec_pp.fc_success,\n                    exec_pp.fc_error\n                );\n            case 'all':\n                return this._all(\n                    exec_pp.params,\n                    exec_pp.fc_success,\n                    exec_pp.fc_error\n                );\n        }\n    }\n\n    public _get(\n        id: string,\n        params: IParamsResource,\n        fc_success,\n        fc_error\n    ): Observable<R> {\n        // http request\n        let path = new PathBuilder();\n        path.applyParams(this, params);\n        path.appendPath(id);\n\n        // CACHEMEMORY\n        let resource = <R>this.getService().cachememory.getOrCreateResource(\n            this.type,\n            id\n        );\n        resource.is_loading = true;\n\n        let subject = new BehaviorSubject<R>(resource);\n\n        // exit if ttl is not expired\n        let temporal_ttl = params.ttl || 0; // this.schema.ttl\n        if (this.getService().cachememory.isResourceLive(id, temporal_ttl)) {\n            // we create a promise because we need return collection before\n            // run success client function\n            let promise: Promise<void> = new Promise(\n                (resolve, reject): void => {\n                    resolve(fc_success);\n                    promise\n                        .then(fc_success2 => {\n                            console.warn('ngx-jsonapi: THIS CODE NEVER RUN, RIGHT? :/ Please check.');\n                            subject.next(resource);\n                            this.runFc(fc_success2, 'cachememory');\n                        })\n                        .catch(noop);\n                    resource.is_loading = false;\n                }\n            );\n            subject.next(resource);\n            subject.complete();\n\n            return subject.asObservable();\n        } else if (Core.injectedServices.rsJsonapiConfig.cachestore_support) {\n            // CACHESTORE\n            this.getService()\n                .cachestore.getResource(resource)\n                .then(success => {\n                    if (Base.isObjectLive(temporal_ttl, resource.lastupdate)) {\n                        subject.next(resource);\n                        this.runFc(fc_success, { data: success });\n                    } else {\n                        this.getGetFromServer(\n                            path,\n                            fc_success,\n                            fc_error,\n                            resource,\n                            subject\n                        );\n                    }\n                })\n                .catch(error => {\n                    this.getGetFromServer(path, fc_success, fc_error, resource, subject);\n                });\n        } else {\n            this.getGetFromServer(path, fc_success, fc_error, resource, subject);\n        }\n        subject.next(resource);\n\n        return subject.asObservable();\n    }\n\n    private getGetFromServer(path, fc_success, fc_error, resource: R, subject: Subject<R>) {\n        Core.injectedServices.JsonapiHttp.get(path.get())\n            .then(success => {\n                Converter.build(success /*.data*/, resource);\n                resource.is_loading = false;\n                this.getService().cachememory.setResource(resource);\n                if (Core.injectedServices.rsJsonapiConfig.cachestore_support) {\n                    this.getService().cachestore.setResource(resource);\n                }\n                subject.next(resource);\n                subject.complete();\n                this.runFc(fc_success, success);\n            })\n            .catch(error => {\n                subject.error(error);\n                this.runFc(fc_error, error);\n            });\n    }\n\n    private _all(params: IParamsCollection, fc_success, fc_error): Observable<ICollection<R>> {\n        // check smartfiltertype, and set on remotefilter\n        if (params.smartfilter && this.smartfiltertype !== 'localfilter') {\n            Object.assign(params.remotefilter, params.smartfilter);\n        }\n\n        params.cachehash = params.cachehash || '';\n\n        // http request\n        let path = new PathBuilder();\n        let paramsurl = new UrlParamsBuilder();\n        path.applyParams(this, params);\n        if (\n            params.remotefilter &&\n            Object.keys(params.remotefilter).length > 0\n        ) {\n            if (this.getService().parseToServer) {\n                this.getService().parseToServer(params.remotefilter);\n            }\n            path.addParam(paramsurl.toparams({ filter: params.remotefilter }));\n        }\n        if (params.page) {\n            if (params.page.number > 1) {\n                path.addParam(\n                    Core.injectedServices.rsJsonapiConfig.parameters.page.number +\n                        '=' + params.page.number\n                );\n            }\n            if (params.page.size) {\n                path.addParam(\n                    Core.injectedServices.rsJsonapiConfig.parameters.page.size +\n                        '=' + params.page.size\n                );\n            }\n        }\n\n        // make request\n        // if we remove this, dont work the same .all on same time (ej: <component /><component /><component />)\n        let tempororay_collection = this.getService().cachememory.getOrCreateCollection(\n            path.getForCache()\n        );\n\n        // creamos otra colleción si luego será filtrada\n        let localfilter = new LocalFilter(params.localfilter);\n        let cached_collection: ICollection<R>;\n        if (params.localfilter && Object.keys(params.localfilter).length > 0) {\n            cached_collection = Base.newCollection();\n        } else {\n            cached_collection = tempororay_collection;\n        }\n\n        let subject = new BehaviorSubject<ICollection<R>>(cached_collection);\n\n        // MEMORY_CACHE\n        let temporal_ttl = params.ttl || this.schema.ttl;\n        if (\n            temporal_ttl >= 0 &&\n            this.getService().cachememory.isCollectionExist(path.getForCache())\n        ) {\n            // get cached data and merge with temporal collection\n            tempororay_collection.$source = 'memory';\n\n            // check smartfiltertype, and set on localfilter\n            if (params.smartfilter && this.smartfiltertype === 'localfilter') {\n                Object.assign(params.localfilter, params.smartfilter);\n            }\n\n            // fill collection and localfilter\n            localfilter.filterCollection(\n                tempororay_collection,\n                cached_collection\n            );\n\n            // exit if ttl is not expired\n            if (\n                this.getService().cachememory.isCollectionLive(\n                    path.getForCache(),\n                    temporal_ttl\n                )\n            ) {\n                // we create a promise because we need return collection before\n                // run success client function\n                let promise: Promise<void> = new Promise(\n                    (resolve, reject): void => {\n                        resolve(fc_success);\n                        promise\n                            .then(fc_success2 => {\n                                subject.next(tempororay_collection);\n                                this.runFc(fc_success2, 'cachememory');\n                            })\n                            .catch(noop);\n                    }\n                );\n            } else {\n                this.getAllFromServer(\n                    path,\n                    params,\n                    fc_success,\n                    fc_error,\n                    tempororay_collection,\n                    cached_collection,\n                    subject\n                );\n            }\n        } else if (Core.injectedServices.rsJsonapiConfig.cachestore_support) {\n            // STORE\n            tempororay_collection.$is_loading = true;\n\n            this.getService()\n                .cachestore.getCollectionFromStorePromise(\n                    path.getForCache(),\n                    path.includes,\n                    tempororay_collection\n                )\n                .then(success => {\n                    tempororay_collection.$source = 'store';\n                    tempororay_collection.$is_loading = false;\n\n                    // when load collection from store, we save collection on memory\n                    this.getService().cachememory.setCollection(\n                        path.getForCache(),\n                        tempororay_collection\n                    );\n\n                    // localfilter getted data\n                    localfilter.filterCollection(\n                        tempororay_collection,\n                        cached_collection\n                    );\n\n                    if (\n                        Base.isObjectLive(\n                            temporal_ttl,\n                            tempororay_collection.$cache_last_update\n                        )\n                    ) {\n                        subject.next(tempororay_collection);\n                        this.runFc(fc_success, { data: success });\n                    } else {\n                        this.getAllFromServer(\n                            path,\n                            params,\n                            fc_success,\n                            fc_error,\n                            tempororay_collection,\n                            cached_collection,\n                            subject\n                        );\n                    }\n                })\n                .catch(error => {\n                    this.getAllFromServer(\n                        path,\n                        params,\n                        fc_success,\n                        fc_error,\n                        tempororay_collection,\n                        cached_collection,\n                        subject\n                    );\n                });\n        } else {\n            // STORE\n            tempororay_collection.$is_loading = true;\n            this.getAllFromServer(\n                path,\n                params,\n                fc_success,\n                fc_error,\n                tempororay_collection,\n                cached_collection,\n                subject\n            );\n        }\n\n        subject.next(<ICollection<R>>cached_collection);\n\n        return subject.asObservable();\n    }\n\n    private getAllFromServer(\n        path,\n        params,\n        fc_success,\n        fc_error,\n        tempororay_collection: ICollection<R>,\n        cached_collection: ICollection,\n        subject: BehaviorSubject<ICollection<R>>\n    ) {\n        // SERVER REQUEST\n        tempororay_collection.$is_loading = true;\n        Core.injectedServices.JsonapiHttp.get(path.get())\n            .then(success => {\n                tempororay_collection.$source = 'server';\n                tempororay_collection.$is_loading = false;\n\n                // this create a new ID for every resource (for caching proposes)\n                // for example, two URL return same objects but with different attributes\n                if (params.cachehash) {\n                    Base.forEach(success.data, resource => {\n                        resource.id = resource.id + params.cachehash;\n                    });\n                }\n\n                Converter.build(success /*.data*/, tempororay_collection);\n\n                this.getService().cachememory.setCollection(\n                    path.getForCache(),\n                    tempororay_collection\n                );\n                if (Core.injectedServices.rsJsonapiConfig.cachestore_support) {\n                    this.getService().cachestore.setCollection(\n                        path.getForCache(),\n                        tempororay_collection,\n                        params.include\n                    );\n                }\n\n                // localfilter getted data\n                let localfilter = new LocalFilter(params.localfilter);\n                localfilter.filterCollection(\n                    tempororay_collection,\n                    cached_collection\n                );\n\n                // trying to define smartfiltertype\n                if (this.smartfiltertype === 'undefined') {\n                    let page = tempororay_collection.page;\n                    if (\n                        page.number === 1 &&\n                        page.total_resources <= page.resources_per_page\n                    ) {\n                        this.smartfiltertype = 'localfilter';\n                    } else if (\n                        page.number === 1 &&\n                        page.total_resources > page.resources_per_page\n                    ) {\n                        this.smartfiltertype = 'remotefilter';\n                    }\n                }\n\n                subject.next(tempororay_collection);\n                subject.complete();\n                this.runFc(fc_success, success);\n            })\n            .catch(error => {\n                // do not replace $source, because localstorage don't write if = server\n                // tempororay_collection.$source = 'server';\n                tempororay_collection.$is_loading = false;\n                subject.next(tempororay_collection);\n                subject.error(error);\n                this.runFc(fc_error, error);\n            });\n    }\n\n    private _delete(id: string, params, fc_success, fc_error): Observable<void> {\n        // http request\n        let path = new PathBuilder();\n        path.applyParams(this, params);\n        path.appendPath(id);\n\n        let subject = new Subject<void>();\n\n        Core.injectedServices.JsonapiHttp.delete(path.get())\n            .then(success => {\n                this.getService().cachememory.removeResource(id);\n                subject.next();\n                subject.complete();\n                this.runFc(fc_success, success);\n            })\n            .catch(error => {\n                subject.error(error);\n                this.runFc(fc_error, error);\n            });\n\n\n        return subject.asObservable();\n    }\n\n    /*\n    @return This resource like a service\n    */\n    public getService<T extends Service<R>>(): T {\n        return <T>(Converter.getService(this.type) || this.register());\n        // let serv = Converter.getService(this.type);\n        // if (serv) {\n        //     return serv;\n        // } else {\n        //     return this.register();\n        // }\n    }\n\n    public clearCacheMemory(): boolean {\n        let path = new PathBuilder();\n        path.applyParams(this);\n\n        return (\n            this.getService().cachememory.deprecateCollections(\n                path.getForCache()\n            ) &&\n            this.getService().cachestore.deprecateCollections(\n                path.getForCache()\n            )\n        );\n    }\n\n    public parseToServer(attributes: IAttributes): void {\n        /* */\n    }\n\n    public parseFromServer(attributes: IAttributes): void {\n        /* */\n    }\n}\n"]}