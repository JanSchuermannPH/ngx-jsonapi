{"version":3,"file":"cachememory.js","sourceRoot":"","sources":["../../src/services/cachememory.ts"],"names":[],"mappings":"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","sourcesContent":["import { ICollection } from '../interfaces';\nimport { ICacheMemory } from '../interfaces/cachememory';\nimport { Base } from './base';\nimport { Resource } from '../resource';\nimport { Converter } from './converter';\nimport { ResourceFunctions } from './resource-functions';\n\nexport class CacheMemory<R extends Resource = Resource> implements ICacheMemory {\n    private collections: { [url: string]: ICollection<R> } = {};\n    private collections_lastupdate: { [url: string]: number } = {};\n    public resources: { [id: string]: Resource } = {};\n\n    public isCollectionExist(url: string): boolean {\n        return url in this.collections &&\n            this.collections[url].$source !== 'new'\n            ? true\n            : false;\n    }\n\n    public isCollectionLive(url: string, ttl: number): boolean {\n        return Date.now() <= this.collections_lastupdate[url] + ttl * 1000;\n    }\n\n    public isResourceLive(id: string, ttl: number): boolean {\n        return (\n            this.resources[id] &&\n            Date.now() <= this.resources[id].lastupdate + ttl * 1000\n        );\n    }\n\n    public getOrCreateCollection(url: string): ICollection<R> {\n        if (!(url in this.collections)) {\n            this.collections[url] = Base.newCollection();\n            this.collections[url].$source = 'new';\n        }\n\n        return this.collections[url];\n    }\n\n    public setCollection(url: string, collection: ICollection): void {\n        // clone collection, because after maybe delete items for localfilter o pagination\n        this.collections[url] = Base.newCollection();\n        Object.keys(collection).forEach(resource_id => {\n            let resource: Resource = collection[resource_id];\n            this.collections[url][resource_id] = resource;\n            this.setResource(resource);\n        });\n        this.collections[url].page = collection.page;\n        this.collections_lastupdate[url] = Date.now();\n    }\n\n    public getOrCreateResource(type: string, id: string): Resource {\n        if (\n            Converter.getService(type).cachememory &&\n            id in Converter.getService(type).cachememory.resources\n        ) {\n            return Converter.getService(type).cachememory.resources[id];\n        } else {\n            let resource = Converter.getService(type).new();\n            resource.id = id;\n            // needed for a lot of request (all and get, tested on multinexo.com)\n            this.setResource(resource, false);\n\n            return resource;\n        }\n    }\n\n    public setResource(resource: Resource, update_lastupdate = false): void {\n        // we cannot redefine object, because view don't update.\n        if (resource.id in this.resources) {\n            ResourceFunctions.resourceToResource(\n                resource,\n                this.resources[resource.id]\n            );\n        } else {\n            this.resources[resource.id] = resource;\n        }\n        this.resources[resource.id].lastupdate = update_lastupdate\n            ? Date.now()\n            : 0;\n    }\n\n    public deprecateCollections(path_start_with: string): boolean {\n        Base.forEach(\n            this.collections_lastupdate,\n            (lastupdate: number, key: string) => {\n                this.collections_lastupdate[key] = 0;\n            }\n        );\n\n        return true;\n    }\n\n    public removeResource(id: string): void {\n        Base.forEach(this.collections, (value, url) => {\n            delete value[id];\n        });\n        this.resources[id].attributes = {}; // just for confirm deletion on view\n        this.resources[id].relationships = {}; // just for confirm deletion on view\n        delete this.resources[id];\n    }\n}\n"]}