{"version":3,"file":"cachestore.js","sourceRoot":"","sources":["../../src/services/cachestore.ts"],"names":[],"mappings":"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","sourcesContent":["import { ICollection, ICache } from '../interfaces';\nimport { IDataResource } from '../interfaces/data-resource';\nimport { IDataCollection } from '../interfaces/data-collection';\nimport { Core } from '../core';\nimport { Base } from './base';\nimport { IObject } from '../interfaces/object';\nimport { Resource } from '../resource';\nimport { Converter } from './converter';\n\nexport class CacheStore implements ICache {\n    public async getResource(\n        resource: Resource /* | IDataResource*/,\n        include: Array<string> = []\n    ): Promise<object> {\n        let mypromise: Promise<object> = new Promise(\n            (resolve, reject): void => {\n                Core.injectedServices.JsonapiStoreService.getObjet(\n                    resource.type + '.' + resource.id\n                )\n                    .then(success => {\n                        Converter.build({ data: success }, resource);\n\n                        let promises: Array<Promise<object>> = [];\n\n                        // include some times is a collection :S\n                        // for (let keys in include) {\n                        Base.forEach(include, resource_type => {\n                            //  && ('attributes' in resource.relationships[resource_type].data)\n                            if (resource_type in resource.relationships) {\n                                // hasOne\n                                let related_resource = <IDataResource>resource\n                                    .relationships[resource_type].data;\n                                if (!('attributes' in related_resource)) {\n                                    // no está cargado aún\n                                    let builded_resource = this.getResourceFromMemory(\n                                        related_resource\n                                    );\n                                    if (builded_resource.is_new) {\n                                        // no está en memoria, la pedimos a store\n                                        promises.push(\n                                            this.getResource(builded_resource)\n                                        );\n                                    } else {\n                                        console.warn(\n                                            'ts-angular-json: esto no debería pasar #isdjf2l1a'\n                                        );\n                                    }\n                                    resource.relationships[\n                                        resource_type\n                                    ].data = builded_resource;\n                                }\n                            }\n                        });\n\n                        resource.lastupdate = success._lastupdate_time;\n\n                        // no debo esperar a que se resuelvan los include\n                        if (promises.length === 0) {\n                            resolve(success);\n                        } else {\n                            // esperamos las promesas de los include antes de dar el resolve\n                            Promise.all(promises)\n                                .then(success3 => {\n                                    resolve(success3);\n                                })\n                                .catch(error3 => {\n                                    reject(error3);\n                                });\n                        }\n                    })\n                    .catch(() => {\n                        reject();\n                    });\n\n                // build collection and resources from store\n                // Core.injectedServices.$q.all(promises)\n                // .then(success2 => {\n                //     deferred.resolve(success2);\n                // })\n                // .catch(() => {\n                //     deferred.reject();\n                // });\n            }\n        );\n\n        return mypromise;\n    }\n\n    public setResource(resource: Resource) {\n        Core.injectedServices.JsonapiStoreService.saveObject(\n            resource.type + '.' + resource.id,\n            resource.toObject().data\n        );\n    }\n\n    public async getCollectionFromStorePromise(\n        url: string,\n        include: Array<string>,\n        collection: ICollection\n    ): Promise<ICollection> {\n        let promise = new Promise(\n            (\n                resolve: (value: ICollection) => void,\n                reject: () => void\n            ): void => {\n                this.getCollectionFromStore(\n                    url,\n                    include,\n                    collection,\n                    resolve,\n                    reject\n                );\n            }\n        );\n\n        return promise;\n    }\n\n    private getCollectionFromStore(\n        url: string,\n        include: Array<string>,\n        collection: ICollection,\n        resolve: (value: ICollection) => void,\n        reject: () => void\n    ) {\n        let promise = Core.injectedServices.JsonapiStoreService.getObjet(\n            'collection.' + url\n        );\n        promise\n            .then((success: IDataCollection) => {\n                // build collection from store and resources from memory\n                // @todo success.data is a collection, not an array\n                if (\n                    this.fillCollectionWithArrrayAndResourcesOnMemory(\n                        success.data,\n                        collection\n                    )\n                ) {\n                    collection.$source = 'store'; // collection from storeservice, resources from memory\n                    collection.$cache_last_update = success._lastupdate_time;\n                    resolve(collection);\n\n                    return;\n                }\n\n                let promise2 = this.fillCollectionWithArrrayAndResourcesOnStore(\n                    success,\n                    include,\n                    collection\n                );\n                promise2\n                    .then(() => {\n                        // just for precaution, we not rewrite server data\n                        if (collection.$source !== 'new') {\n                            console.warn(\n                                'ts-angular-json: esto no debería pasar. buscar eEa2ASd2#'\n                            );\n                            throw new Error(\n                                'ts-angular-json: esto no debería pasar. buscar eEa2ASd2#'\n                            );\n                        }\n                        collection.$source = 'store'; // collection and resources from storeservice\n                        collection.$cache_last_update =\n                            success._lastupdate_time;\n                        resolve(collection);\n                    })\n                    .catch(() => {\n                        reject();\n                    });\n            })\n            .catch(() => {\n                reject();\n            });\n    }\n\n    private fillCollectionWithArrrayAndResourcesOnMemory(\n        dataresources: Array<IDataResource>,\n        collection: ICollection\n    ): boolean {\n        let all_ok = true;\n        for (let key in dataresources) {\n            let dataresource = dataresources[key];\n\n            let resource = this.getResourceFromMemory(dataresource);\n            if (resource.is_new) {\n                all_ok = false;\n                break;\n            }\n            collection[dataresource.id] = resource;\n        }\n\n        return all_ok;\n    }\n\n    private getResourceFromMemory(dataresource: IDataResource): Resource {\n        let cachememory = Converter.getService(dataresource.type).cachememory;\n        let resource = cachememory.getOrCreateResource(\n            dataresource.type,\n            dataresource.id\n        );\n\n        return resource;\n    }\n\n    private async fillCollectionWithArrrayAndResourcesOnStore(\n        datacollection: IDataCollection,\n        include: Array<string>,\n        collection: ICollection\n    ): Promise<object> {\n        let promise = new Promise(\n            (\n                resolve: (value: object) => void,\n                reject: (value: any) => void\n            ): void => {\n                // request resources from store\n                let temporalcollection = {};\n                let promises = [];\n                for (let key in datacollection.data) {\n                    let dataresource: IDataResource = datacollection.data[key];\n                    let cachememory = Converter.getService(dataresource.type)\n                        .cachememory;\n                    temporalcollection[\n                        dataresource.id\n                    ] = cachememory.getOrCreateResource(\n                        dataresource.type,\n                        dataresource.id\n                    );\n                    promises.push(\n                        this.getResource(\n                            temporalcollection[dataresource.id],\n                            include\n                        )\n                    );\n                }\n\n                // build collection and resources from store\n                Promise.all(promises)\n                    .then(success2 => {\n                        if (datacollection.page) {\n                            collection.page = datacollection.page;\n                        }\n                        for (let key in temporalcollection) {\n                            let resource: Resource = temporalcollection[key];\n                            collection[resource.id] = resource; // collection from storeservice, resources from memory\n                        }\n                        resolve(collection);\n                    })\n                    .catch(error2 => {\n                        reject(error2);\n                    });\n            }\n        );\n\n        return promise;\n    }\n\n    public setCollection(\n        url: string,\n        collection: ICollection,\n        include: Array<string>\n    ) {\n        let tmp = { data: {}, page: {} };\n        let resources_for_save: { [uniqkey: string]: Resource } = {};\n        Base.forEach(collection, (resource: Resource) => {\n            this.setResource(resource);\n            tmp.data[resource.id] = { id: resource.id, type: resource.type };\n\n            Base.forEach(include, resource_type_alias => {\n                if ('id' in resource.relationships[resource_type_alias].data) {\n                    // hasOne\n                    let ress = <Resource>resource.relationships[\n                        resource_type_alias\n                    ].data;\n                    resources_for_save[resource_type_alias + ress.id] = ress;\n                } else {\n                    // hasMany\n                    let collection2 = <ICollection>resource.relationships[\n                        resource_type_alias\n                    ].data;\n                    Base.forEach(collection2, (inc_resource: Resource) => {\n                        resources_for_save[\n                            resource_type_alias + inc_resource.id\n                        ] = inc_resource;\n                    });\n                }\n            });\n        });\n        tmp.page = collection.page;\n        Core.injectedServices.JsonapiStoreService.saveObject(\n            'collection.' + url,\n            tmp\n        );\n\n        Base.forEach(resources_for_save, resource_for_save => {\n            if ('is_new' in resource_for_save) {\n                this.setResource(resource_for_save);\n            } else {\n                console.warn(\n                    'No se pudo guardar en la cache el',\n                    resource_for_save.type,\n                    'por no se ser Resource.',\n                    resource_for_save\n                );\n            }\n        });\n    }\n\n    public deprecateCollections(path_start_with: string) {\n        Core.injectedServices.JsonapiStoreService.deprecateObjectsWithKey(\n            'collection.' + path_start_with\n        );\n\n        return true;\n    }\n}\n"]}