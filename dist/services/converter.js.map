{"version":3,"file":"converter.js","sourceRoot":"","sources":["../../src/services/converter.ts"],"names":[],"mappings":"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","sourcesContent":["// import * as angular from 'angular';\nimport { Core } from '../core';\nimport { Resource } from '../resource';\nimport { Service } from '../service';\nimport { ICollection, IResourcesById, IResourcesByType } from '../interfaces';\nimport { ResourceRelationshipsConverter } from './resource-relationships-converter';\nimport { IDataObject } from '../interfaces/data-object';\nimport { IDataCollection } from '../interfaces/data-collection';\nimport { IDataResource } from '../interfaces/data-resource';\nimport { Base } from '../services/base';\n\nexport class Converter {\n    /*\n    Convert json arrays (like included) to an Resources arrays without [keys]\n    */\n    private static json_array2resources_array(\n        json_array: Array<IDataResource>,\n        destination_array: IResourcesById = {}\n    ): void {\n        for (let data of json_array) {\n            let resource = Converter.json2resource(data, false);\n            destination_array[resource.type + '_' + resource.id] = resource;\n        }\n    }\n\n    /*\n    Convert json arrays (like included) to an indexed Resources array by [type][id]\n    */\n    public static json_array2resources_array_by_type(\n        json_array: Array<IDataResource>\n    ): IResourcesByType {\n        let all_resources: IResourcesById = {};\n        let resources_by_type: IResourcesByType = {};\n\n        Converter.json_array2resources_array(json_array, all_resources);\n        Base.forEach(all_resources, (resource: Resource) => {\n            if (!(resource.type in resources_by_type)) {\n                resources_by_type[resource.type] = {};\n            }\n            resources_by_type[resource.type][resource.id] = resource;\n        });\n\n        return resources_by_type;\n    }\n\n    public static json2resource(\n        json_resource: IDataResource,\n        instance_relationships\n    ): Resource {\n        let resource_service = Converter.getService(json_resource.type);\n        if (resource_service) {\n            return Converter.procreate(json_resource);\n        } else {\n            // service not registered\n            console.warn(\n                '`' + json_resource.type + '`',\n                'service not found on json2resource()'\n            );\n            let temp = new Resource();\n            temp.id = json_resource.id;\n            temp.type = json_resource.type;\n\n            return temp;\n        }\n    }\n\n    public static getService(type: string): Service {\n        let resource_service = Core.me.getResourceService(type);\n\n        return resource_service;\n    }\n\n    /* return a resource type(resoruce_service) with data(data) */\n    private static procreate(data: IDataResource): Resource {\n        if (!('type' in data && 'id' in data)) {\n            console.error('Jsonapi Resource is not correct', data);\n        }\n\n        let resource: Resource;\n        if (data.id in Converter.getService(data.type).cachememory.resources) {\n            resource = Converter.getService(data.type).cachememory.resources[\n                data.id\n            ];\n        } else {\n            resource = Converter.getService(\n                data.type\n            ).cachememory.getOrCreateResource(data.type, data.id);\n        }\n\n        resource.attributes = data.attributes || {};\n        resource.is_new = false;\n\n        return resource;\n    }\n\n    public static build(\n        document_from: IDataCollection | IDataObject,\n        resource_dest: Resource | ICollection\n    ) {\n        // instancio los include y los guardo en included arrary\n        let included_resources: IResourcesByType = {};\n        if ('included' in document_from) {\n            included_resources = Converter.json_array2resources_array_by_type(\n                document_from.included\n            );\n        }\n\n        if (Array.isArray(document_from.data)) {\n            Converter._buildCollection(\n                <IDataCollection>document_from,\n                <ICollection>resource_dest,\n                included_resources\n            );\n        } else {\n            Converter._buildResource(\n                document_from.data,\n                <Resource>resource_dest,\n                included_resources\n            );\n        }\n    }\n\n    private static _buildCollection(\n        collection_data_from: IDataCollection,\n        collection_dest: ICollection,\n        included_resources: IResourcesByType\n    ) {\n        // sometime get Cannot set property 'number' of undefined (page)\n        if (collection_dest.page && collection_data_from.meta) {\n            collection_dest.page.number = collection_data_from.meta.page || 1;\n            collection_dest.page.resources_per_page =\n                collection_data_from.meta.resources_per_page || null;\n            collection_dest.page.total_resources =\n                collection_data_from.meta.total_resources || null;\n        }\n\n        // convert and add new dataresoures to final collection\n        let new_ids = {};\n        for (let dataresource of collection_data_from.data) {\n            if (!(dataresource.id in collection_dest)) {\n                collection_dest[dataresource.id] = Converter.getService(\n                    dataresource.type\n                ).cachememory.getOrCreateResource(\n                    dataresource.type,\n                    dataresource.id\n                );\n            }\n            Converter._buildResource(\n                dataresource,\n                collection_dest[dataresource.id],\n                included_resources\n            );\n            new_ids[dataresource.id] = dataresource.id;\n        }\n\n        // remove old members of collection (bug, for example, when request something like orders/10/details and has new ids)\n        Base.forEach(collection_dest, resource => {\n            if (!(resource.id in new_ids)) {\n                delete collection_dest[resource.id];\n            }\n        });\n    }\n\n    private static _buildResource(\n        resource_data_from: IDataResource,\n        resource_dest: Resource,\n        included_resources: IResourcesByType\n    ) {\n        resource_dest.id = resource_data_from.id || '';\n        resource_dest.attributes = resource_data_from.attributes || {};\n\n        resource_dest.is_new = false;\n        let service = Converter.getService(resource_data_from.type);\n\n        // esto previene la creación indefinida de resources\n        // el servicio debe estar sino no tenemos el schema\n        if (!resource_dest.relationships || !service) {\n            return;\n        }\n\n        Converter.getService(resource_data_from.type).parseFromServer(resource_dest.attributes);\n\n        new ResourceRelationshipsConverter(\n            Converter.getService,\n            resource_data_from.relationships || {},\n            resource_dest.relationships,\n            included_resources,\n            service.schema\n        ).buildRelationships();\n    }\n}\n"]}