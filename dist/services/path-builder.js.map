{"version":3,"file":"path-builder.js","sourceRoot":"","sources":["../../src/services/path-builder.ts"],"names":[],"mappings":";;;;AACA,OAAO,EAAE,IAAI,EAAE,MAAM,SAAS,CAAC;AAG/B,MAAM;;qBAC4B,EAAE;wBACC,EAAE;0BACC,EAAE;;;;;;;IAE/B,WAAW,CACd,OAAgB,EAChB,SAA8C,EAAE;QAEhD,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC,CAAC;QACtC,EAAE,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;YACpB,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;SACtC;QACD,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC;QACnC,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;YACjB,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;SACnC;;;;;;IAGE,UAAU,CAAC,KAAa;QAC3B,EAAE,CAAC,CAAC,KAAK,KAAK,EAAE,CAAC,CAAC,CAAC;YACf,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC1B;;;;;;IAGE,QAAQ,CAAC,KAAa;QACzB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;;;;;;IAGxB,UAAU,CAAC,aAA4B;QAC3C,IAAI,CAAC,QAAQ,GAAG,aAAa,CAAC;;;;;IAG3B,WAAW;QACd,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;;;;;IAGrD,GAAG;QACN,qBAAI,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC;QAElC,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YAC3B,MAAM,CAAC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;SACrD;QAED,MAAM,CAAC,CACH,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC;YACpB,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC;kBACZ,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,gBAAgB;oBACtD,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;kBAChB,EAAE,CAAC,CACZ,CAAC;;CAET","sourcesContent":["import { IParamsCollection, IParamsResource } from '../interfaces';\nimport { Core } from '../core';\nimport { Service } from '../service';\n\nexport class PathBuilder {\n    public paths: Array<string> = [];\n    public includes: Array<string> = [];\n    private get_params: Array<string> = [];\n\n    public applyParams(\n        service: Service,\n        params: IParamsResource | IParamsCollection = {}\n    ) {\n        this.appendPath(service.getPrePath());\n        if (params.beforepath) {\n            this.appendPath(params.beforepath);\n        }\n        this.appendPath(service.getPath());\n        if (params.include) {\n            this.setInclude(params.include);\n        }\n    }\n\n    public appendPath(value: string) {\n        if (value !== '') {\n            this.paths.push(value);\n        }\n    }\n\n    public addParam(param: string): void {\n        this.get_params.push(param);\n    }\n\n    private setInclude(strings_array: Array<string>) {\n        this.includes = strings_array;\n    }\n\n    public getForCache(): string {\n        return this.paths.join('/') + this.get_params.join('/');\n    }\n\n    public get(): string {\n        let params = [...this.get_params];\n\n        if (this.includes.length > 0) {\n            params.push('include=' + this.includes.join(','));\n        }\n\n        return (\n            this.paths.join('/') +\n            (params.length > 0\n                ? Core.injectedServices.rsJsonapiConfig.params_separator +\n                  params.join('&')\n                : '')\n        );\n    }\n}\n"]}