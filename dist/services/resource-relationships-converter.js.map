{"version":3,"file":"resource-relationships-converter.js","sourceRoot":"","sources":["../../src/services/resource-relationships-converter.ts"],"names":[],"mappings":"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","sourcesContent":["import { noop } from 'rxjs/util/noop';\n\nimport { IRelationships, ISchema, IResourcesByType } from '../interfaces';\nimport { IDataCollection } from '../interfaces/data-collection';\nimport { IDataObject } from '../interfaces/data-object';\nimport { IDataResource } from '../interfaces/data-resource';\nimport { Base } from '../services/base';\nimport { Resource } from '../resource';\n\nexport class ResourceRelationshipsConverter {\n    private getService: Function;\n    private relationships_from: object;\n    private relationships_dest: IRelationships;\n    private included_resources: IResourcesByType;\n    private schema: ISchema;\n\n    public constructor(\n        getService: Function,\n        relationships_from: object,\n        relationships_dest: IRelationships,\n        included_resources: IResourcesByType,\n        schema: ISchema\n    ) {\n        this.getService = getService;\n        this.relationships_from = relationships_from;\n        this.relationships_dest = relationships_dest;\n        this.included_resources = included_resources;\n        this.schema = schema;\n    }\n\n    public buildRelationships(): void {\n        // recorro los relationships levanto el service correspondiente\n        Base.forEach(this.relationships_from,\n            (\n                relation_from_value: IDataCollection & IDataObject,\n                relation_key\n            ) => {\n                // relation is in schema? have data or just links?\n                if (\n                    !(relation_key in this.relationships_dest) &&\n                    'data' in relation_from_value\n                ) {\n                    this.relationships_dest[relation_key] = {\n                        data: Base.newCollection(),\n                        content: 'collection',\n                    };\n                }\n\n                // sometime data=null or simple { }\n                if (!relation_from_value.data) {\n                    return;\n                }\n\n                if (\n                    this.schema.relationships[relation_key] &&\n                    this.schema.relationships[relation_key].hasMany\n                ) {\n                    // hasMany\n                    this.__buildRelationshipHasMany(\n                        relation_from_value,\n                        relation_key\n                    );\n                } else {\n                    // hasOne\n                    this.__buildRelationshipHasOne(\n                        relation_from_value,\n                        relation_key\n                    );\n                }\n            }\n        );\n    }\n\n    private __buildRelationshipHasMany(\n        relation_from_value: IDataCollection,\n        relation_key: any // number to string?\n    ) {\n        let relation_type = (relation_from_value.data[0] ? relation_from_value.data[0].type : '');\n        // @todo: we need check schema. maybe relationship it's empty\n        relation_type = relation_type || relation_key /* || schema.relationship.type */;\n\n        if (this.getService(relation_type)) {\n            this.__buildRelationshipCollection(relation_from_value, relation_key);\n        } else {\n            this.__buildRelationshipDataCollection(relation_from_value, relation_key);\n        }\n    }\n\n    private __buildRelationshipDataCollection(\n        relation_from_value: IDataCollection,\n        relation_key: any // number to string?\n    ) {\n        // @todo: usar collection on data?\n        this.relationships_dest[relation_key] = {\n            data: relation_from_value.data,\n            content: 'ids'\n        };\n    }\n\n    private __buildRelationshipCollection(\n        relation_from_value: IDataCollection,\n        relation_key: any // number to string?\n    ) {\n        if (relation_from_value.data.length === 0) {\n            // from data is an empty array, remove all data on relationship\n            this.relationships_dest[relation_key] = {\n                data: Base.newCollection(),\n                content: 'collection'\n            };\n\n            return;\n        }\n\n        let tmp_relationship_data = Base.newCollection();\n        this.relationships_dest[relation_key].content = 'collection';\n        Base.forEach(\n            relation_from_value.data,\n            (relation_value: IDataResource) => {\n                let tmp = this.__buildRelationship(\n                    relation_value,\n                    this.included_resources\n                );\n\n                // sometimes we have a cache like a services\n                if (\n                    !('attributes' in tmp) &&\n                    tmp.id in this.relationships_dest[relation_key].data &&\n                    'attributes' in\n                        this.relationships_dest[relation_key].data[tmp.id]\n                ) {\n                    tmp_relationship_data[tmp.id] = this.relationships_dest[\n                        relation_key\n                    ].data[tmp.id];\n                } else {\n                    tmp_relationship_data[tmp.id] = tmp;\n                }\n\n                // some resources are not a Resource object\n                if (!('attributes' in tmp)) {\n                    this.relationships_dest[relation_key].content = 'ids';\n                }\n            }\n        );\n\n        // REMOVE resources from cached collection\n        // build an array with the news ids\n        let new_ids = {};\n        Base.forEach(\n            relation_from_value.data,\n            (data_resource: IDataResource) => {\n                new_ids[data_resource.id] = true;\n            }\n        );\n        // check if new ids are on destination. If not, delete resource\n        Base.forEach(\n            this.relationships_dest[relation_key].data,\n            (relation_dest_value: IDataResource) => {\n                if (!(relation_dest_value.id in new_ids)) {\n                    delete this.relationships_dest[relation_dest_value.id];\n                }\n            }\n        );\n\n        this.relationships_dest[relation_key].data = tmp_relationship_data;\n    }\n\n    private __buildRelationshipHasOne(\n        relation_data_from: IDataObject,\n        relation_data_key: any // number to string?\n    ): void {\n        // new related resource <> cached related resource <> ? delete!\n        if (!('type' in relation_data_from.data)) {\n            this.relationships_dest[relation_data_key].data = {};\n\n            return;\n        }\n\n        if (\n            this.relationships_dest[relation_data_key].data == null ||\n            relation_data_from.data.id !==\n                (<Resource>this.relationships_dest[relation_data_key].data).id\n        ) {\n            this.relationships_dest[relation_data_key].data = {};\n        }\n\n        // trae datos o cambió resource? actualizamos!\n        if (\n            // 'attributes' in relation_data_from.data ||  // ???\n            !(<Resource>this.relationships_dest[relation_data_key].data)\n                .attributes || // we have only a  dataresource\n            (<Resource>this.relationships_dest[relation_data_key].data).id !==\n                relation_data_from.data.id\n        ) {\n            let resource_data = this.__buildRelationship(\n                relation_data_from.data,\n                this.included_resources\n            );\n            this.relationships_dest[relation_data_key].data = resource_data;\n        }\n    }\n\n    private __buildRelationship(\n        resource_data_from: IDataResource,\n        included_array: IResourcesByType\n    ): Resource | IDataResource {\n        if (\n            resource_data_from.type in included_array &&\n            resource_data_from.id in included_array[resource_data_from.type]\n        ) {\n            // it's in included\n            return included_array[resource_data_from.type][\n                resource_data_from.id\n            ];\n        } else {\n            // OPTIONAL: return cached Resource\n            let service = this.getService(resource_data_from.type);\n            if (\n                service &&\n                resource_data_from.id in service.cachememory.resources\n            ) {\n                return service.cachememory.resources[resource_data_from.id];\n            } else {\n                // we dont have information on included or memory. try pass to store\n                if (service) {\n                    service.cachestore\n                        .getResource(resource_data_from)\n                        .catch(noop);\n                }\n\n                return resource_data_from;\n            }\n        }\n    }\n}\n"]}