{"version":3,"file":"http.service.js","sourceRoot":"","sources":["../../src/sources/http.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Deferred } from '../shared/deferred';\nimport { Injectable } from '@angular/core';\nimport { IDataObject } from '../interfaces/data-object';\nimport { NoDuplicatedHttpCallsService } from '../services/noduplicatedhttpcalls.service';\nimport { Core } from '../core';\nimport { Base } from '../services/base';\nimport { HttpClient, HttpRequest, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport { JsonapiConfig } from '../jsonapi-config';\n\nimport 'rxjs/add/operator/toPromise';\nimport 'rxjs/add/operator/map';\n\n@Injectable()\nexport class Http {\n    public constructor(\n        private http: HttpClient,\n        private rsJsonapiConfig: JsonapiConfig,\n        // private $timeout,\n        // private rsJsonapiConfig,\n        private noDuplicatedHttpCallsService: NoDuplicatedHttpCallsService // private $q\n    ) {}\n\n    public async delete(path: string): Promise<IDataObject> {\n        return this.exec(path, 'DELETE');\n    }\n\n    public async get(path: string): Promise<IDataObject> {\n        return this.exec(path, 'get');\n    }\n\n    public async exec(\n        path: string,\n        method: string,\n        data?: IDataObject,\n        call_loadings_error: boolean = true\n    ): Promise<IDataObject> {\n        let fakeHttpPromise = null;\n\n        // http request (if we don't have any GET request yet)\n        if (\n            method !== 'get' ||\n            !this.noDuplicatedHttpCallsService.hasPromises(path)\n        ) {\n            let req = new HttpRequest(\n                method,\n                this.rsJsonapiConfig.url + path,\n                data || null,\n                {\n                    headers: new HttpHeaders({\n                        'Content-Type': 'application/vnd.api+json',\n                        'Accept': 'application/vnd.api+json'\n                    })\n                }\n            );\n\n            let http_observable = this.http.request(req);\n\n            if (method === 'get') {\n                this.noDuplicatedHttpCallsService.setPromiseRequest(\n                    path,\n                    http_observable.toPromise()\n                );\n            } else {\n                fakeHttpPromise = http_observable.toPromise();\n            }\n        }\n        if (fakeHttpPromise === null) {\n            // method === 'get'\n            fakeHttpPromise = this.noDuplicatedHttpCallsService.getAPromise(\n                path\n            );\n        }\n\n        let deferred: Deferred<IDataObject> = new Deferred();\n        Core.me.refreshLoadings(1);\n        fakeHttpPromise\n            .then(success => {\n                success = success.body || success;\n                Core.me.refreshLoadings(-1);\n                deferred.resolve(success);\n            })\n            .catch(error => {\n                error = error.error || error;\n                Core.me.refreshLoadings(-1);\n                if (error.status <= 0) {\n                    // offline?\n                    if (!Core.me.loadingsOffline(error)) {\n                        console.warn(\n                            'Jsonapi.Http.exec (use JsonapiCore.loadingsOffline for catch it) error =>',\n                            error\n                        );\n                    }\n                } else {\n                    if (call_loadings_error && !Core.me.loadingsError(error)) {\n                        console.warn(\n                            'Jsonapi.Http.exec (use JsonapiCore.loadingsError for catch it) error =>',\n                            error\n                        );\n                    }\n                }\n                deferred.reject(error);\n            });\n\n        return deferred.promise;\n    }\n}\n"]}