{"version":3,"file":"store.service.js","sourceRoot":"","sources":["../../src/sources/store.service.ts"],"names":[],"mappings":"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","sourcesContent":["import * as localForage from 'localforage';\nimport { Base } from '../services/base';\nimport { IStoreObject } from '../interfaces';\nimport { noop } from 'rxjs/util/noop';\nimport { Deferred } from '../shared/deferred';\n\ninterface IStoreElement {\n    time: number;\n}\n\ninterface IStoreElement2 {\n    _lastupdate_time: number;\n}\n\nexport class StoreService {\n    private globalstore: LocalForage;\n    private allstore: LocalForage;\n\n    public constructor() {\n        this.globalstore = localForage.createInstance({\n            name: 'jsonapiglobal',\n        });\n        this.allstore = localForage.createInstance({ name: 'allstore' });\n        this.checkIfIsTimeToClean();\n    }\n\n    private checkIfIsTimeToClean() {\n        // check if is time to check cachestore\n        this.globalstore\n            .getItem('_lastclean_time')\n            .then((success: IStoreElement) => {\n                if (Date.now() >= success.time + 12 * 3600 * 1000) {\n                    // is time to check cachestore!\n                    this.globalstore.setItem('_lastclean_time', {\n                        time: Date.now(),\n                    });\n                    this.checkAndDeleteOldElements();\n                }\n            })\n            .catch(() => {\n                this.globalstore.setItem('_lastclean_time', {\n                    time: Date.now(),\n                });\n            });\n    }\n\n    private checkAndDeleteOldElements() {\n        this.allstore\n            .keys()\n            .then(success => {\n                Base.forEach(success, key => {\n                    // recorremos cada item y vemos si es tiempo de removerlo\n                    this.allstore\n                        .getItem(key)\n                        .then((success2: IStoreElement2) => {\n                            // es tiempo de removerlo?\n                            if (\n                                Date.now() >=\n                                success2._lastupdate_time + 24 * 3600 * 1000\n                            ) {\n                                // removemos!!\n                                this.allstore.removeItem(key);\n                            }\n                        })\n                        .catch(noop);\n                });\n            })\n            .catch(noop);\n    }\n\n    public async getObjet(key: string): Promise<object> {\n        let deferred: Deferred<object> = new Deferred();\n\n        this.allstore\n            .getItem('jsonapi.' + key)\n            .then(success => {\n                deferred.resolve(success);\n            })\n            .catch(error => {\n                deferred.reject(error);\n            });\n\n        return deferred.promise;\n    }\n\n    public async getObjets(keys: Array<string>): Promise<object> {\n        return this.allstore.getItem('jsonapi.' + keys[0]);\n    }\n\n    public saveObject(key: string, value: IStoreObject): void {\n        value._lastupdate_time = Date.now();\n        this.allstore.setItem('jsonapi.' + key, value);\n    }\n\n    public clearCache() {\n        this.allstore.clear();\n        this.globalstore.clear();\n    }\n\n    public deprecateObjectsWithKey(key_start_with: string) {\n        this.allstore\n            .keys()\n            .then(success => {\n                Base.forEach(success, (key: string) => {\n                    if (key.startsWith(key_start_with)) {\n                        // key of stored object starts with key_start_with\n                        this.allstore\n                            .getItem(key)\n                            .then((success2: IStoreElement2) => {\n                                success2._lastupdate_time = 0;\n                                this.allstore.setItem(key, success2);\n                            })\n                            .catch(noop);\n                    }\n                });\n            })\n            .catch(noop);\n    }\n}\n"]}